import bpy
import marshmallow
from typing import List, Tuple

from .HandTypes import HandAnimationData
from .HandJoint import HandJoint


def spawn_hand_empty(hand_name: str, location: Tuple[float, float, float] = (0, 0, 0)) -> List[bpy.types.Object]:
    """Spawns a list of empty objects representing the hand joints at the given location."""
    joints: List[bpy.types.Object] = []
    for joint in HandJoint:
        # Create an empty object for each joint
        bpy.ops.object.empty_add(type='PLAIN_AXES', align='WORLD', radius=0.01)
        empty = bpy.context.object

        # Assign the parent to the empty object
        parent = joint.predecessor()
        if parent is not None:
            empty.parent = joints[parent.value]

        # Rename the empty object to the joint name and add it to the list
        empty.name = joint.name
        joints.append(empty)

    # Move the wrist empty to the hand location and rename it to the hand name
    joints[HandJoint.WRIST.value].location = location
    joints[HandJoint.WRIST.value].name = hand_name
    return joints


def generate_hand(hand_data: HandAnimationData, location: Tuple[float, float, float] = (0, 0, 0)):
    joint_empty_list = spawn_hand_empty(hand_data.name, location)
    print(joint_empty_list)


class MESH_OT_ImportHands(bpy.types.Operator):
    """Imports hand animation data from selected json file generated by Hand Capture."""
    bl_idname = "mesh.import_hands"
    bl_label = "Import Hands"
    bl_options = {'REGISTER'}

    filepath: bpy.props.StringProperty(subtype="FILE_PATH")  # noqa

    def execute(self, context):
        print("----------------- Executing Import Hands -----------------")
        try:
            with open(self.filepath, 'r') as file:
                print("Reading file...")
                json_string = file.read()
                print("Loading data...")
                data: List[HandAnimationData] = HandAnimationData.schema().loads(json_string, many=True)
        except marshmallow.exceptions.ValidationError:
            self.report({'ERROR'}, "The selected file is not in the correct format.")
            return {'CANCELLED'}

        i = 0
        for hand_data in data:
            print(f"Generating hand {hand_data.name}...")
            generate_hand(hand_data, (i/4, 0, 0))
            i += 1

        print("----------------- Import Hands Finished -----------------")
        return {'FINISHED'}

    def invoke(self, context, event):
        context.window_manager.fileselect_add(self)
        return {'RUNNING_MODAL'}
